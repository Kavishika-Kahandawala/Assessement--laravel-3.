<?php

/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Simply tell Laravel the HTTP verbs and URIs it should respond to. It is a
| breeze to setup your application using Laravel's RESTful routing and it
| is perfectly suited for building large applications and simple APIs.
|
| Let's respond to a simple GET request to http://example.com/hello:
|
|		Route::get('hello', function()
|		{
|			return 'Hello World!';
|		});
|
| You can even respond to more than one URI:
|
|		Route::post(array('hello', 'world'), function()
|		{
|			return 'Hello World!';
|		});
|
| It's easy to allow URI wildcards using (:num) or (:any):
|
|		Route::put('hello/(:any)', function($name)
|		{
|			return "Welcome, $name.";
|		});
|
*/

// Route::get('test-database-connection', function () {
// 	try {
// 		// Attempt to connect to the database
// 		DB::connection()->getPdo();

// 		return "Connected to the database!";
// 	} catch (Exception $e) {
// 		return "Failed to connect to the database. Error: " . $e->getMessage();
// 	}
// });

// Route::get('test-access-users-table', function () {
// 	try {
// 		// Query the 'users' table
// 		$users = User::all();

// 		// Return the results as a list
// 		$output = '<ul>';
// 		foreach ($users as $user) {
	// 			$output .= '<li>User ID: ' . $user->id . ', Username: ' . $user->username . ', Name: ' . $user->name . '</li>';
	// 		}
	// 		$output .= '</ul>';
	
	// 		return $output;
	// 	} catch (Exception $e) {
// 		return "Failed to access the 'users' table. Error: " . $e->getMessage();
// 	}
// });


Route::get('login', 'auth.login@index');
Route::post('login', 'auth.login@login');


Route::get('register', 'auth.register@index');
Route::post('register', 'auth.register@register');


Route::get('logout', 'auth.logout@index');
// Route::get('logout', array('as' => 'logout', 'uses' => 'auth.logout@logout'));

// uncomment these to test without log in 
//  Dashboard
Route::get('dashboard', 'dashboard@index');




// Show the product creation form
Route::get('add-product', 'manage_products.product_form@index');
Route::get('add-category', 'manage_products.category_form@index');
Route::get('edit-product/(:num)', 'manage_products.edit_product_form@index');


// API
// post
Route::post('api/add-product', 'api.add_products@index');
Route::post('api/add-category', 'api.add_category@index');
// Route::post('api/edit-product/(:num)', 'api.edit_products@index');
Route::put('api/edit-product/(:num)', 'api.edit_products@index');
// Route::post('api/add-product', array('uses' => 'api.add_products@addProduct'));

// get
Route::get('api/get-category', 'api.get_category@index');
Route::get('api/get-product', 'api.get_products@index');
Route::get('api/view-product/(:num)', 'api.view_product@index');


//delete
Route::delete('api/delete-product/(:num)', 'api.delete_product@product');

// //with rules
// Route::get('add-product', array('before' => 'auth', 'uses' => 'manage_products.product_form@index'));
// Route::get('add-category', array('before' => 'auth', 'uses' => 'manage_products.category_form@index'));
// Route::get('edit-product/(:num)', array('before' => 'auth', 'uses' => 'manage_products.edit_product_form@index'));

// Route::get('dashboard', array('before' => 'auth', 'uses' => 'dashboard@index'));

// // API
// // post
// Route::post('api/add-product', array('before' => 'auth', 'uses' => 'api.add_products@index'));
// Route::post('api/add-category', array('before' => 'auth', 'uses' => 'api.add_category@index'));
// // Route::post('api/edit-product/(:num)', array('before' => 'auth', 'uses' => 'api.edit_products@index'));
// Route::put('api/edit-product/(:num)', array('before' => 'auth', 'uses' => 'api.edit_products@index'));
// // Route::post('api/add-product', array('before' => 'auth', 'uses' => 'api.add_products@addProduct'));

// // get
// Route::get('api/get-category', array('before' => 'auth', 'uses' => 'api.get_category@index'));
// Route::get('api/get-product', array('before' => 'auth', 'uses' => 'api.get_products@index'));
// Route::get('api/view-product/(:num)', array('before' => 'auth', 'uses' => 'api.view_product@index'));

// //delete
// Route::delete('api/delete-product/(:num)', array('before' => 'auth', 'uses' => 'api.delete_product@product'));







// APIs
// Route::controller('api/registration');
// Route::post('api/register', 'auth_register@api_register');

Route::get('/', function () {
	return Redirect::to('login');
});
// Route::get('/', function()
// {
	// 	return View::make('home.index');
	// });
	Route::get('index.php', function () {
		return Redirect::to('login');
	});


/*
|--------------------------------------------------------------------------
| Application 404 & 500 Error Handlers
|--------------------------------------------------------------------------
|
| To centralize and simplify 404 handling, Laravel uses an awesome event
| system to retrieve the response. Feel free to modify this function to
| your tastes and the needs of your application.
|
| Similarly, we use an event to handle the display of 500 level errors
| within the application. These errors are fired when there is an
| uncaught exception thrown in the application. The exception object
| that is captured during execution is then passed to the 500 listener.
|
*/

Event::listen('404', function () {
	return Response::error('404');
});

Event::listen('500', function ($exception) {
	return Response::error('500');
});

/*
|--------------------------------------------------------------------------
| Route Filters
|--------------------------------------------------------------------------
|
| Filters provide a convenient method for attaching functionality to your
| routes. The built-in before and after filters are called before and
| after every request to your application, and you may even create
| other filters that can be attached to individual routes.
|
| Let's walk through an example...
|
| First, define a filter:
|
|		Route::filter('filter', function()
|		{
	|			return 'Filtered!';
	|		});
	|
	| Next, attach the filter to a route:
	|
	|		Route::get('/', array('before' => 'filter', function()
	|		{
		|			return 'Hello World!';
|		}));
|
*/

Route::filter('before', function () {
	// Do stuff before every request to your application...
});

Route::filter('after', function ($response) {
	// Do stuff after every request to your application...
});

Route::filter('csrf', function () {
	if (Request::forged())
	return Response::error('500');
});

// Filter for authentication
// Route::filter('auth', function () {
// 	if (Auth::guest())
// 		return Redirect::to('login');
// });

// Route::filter('auth', function () {
//     if (Auth::guest())
//         return Redirect::to('login');
// });

Route::filter('auth', function () {
    if (!Session::has('user')) {
        return Redirect::to('login')->with('message', 'You must be logged in to access this page');
    }
});

// Route::filter('before', 'auth')->except(array('register', 'login'));